// todo :
// - feedback on errors (browse, update return 8 : not allowed & incorrect output [if set_silent not invoked])

/**
* singleton implementation for easyObject
*
*/
var easyObject = {
		/* configuration data */
		conf: {
				user_id: 0,
				user_key: 0,
				// user_lang is the language in which the UI is displayed (set once and for all)
				user_lang: 'en',
				// content_lang is the language in which multilang fields values are displayed (on demand)
				content_lang: 'en'
		},
		/* objects data handlers */
		schemas: [],
		i18n: [],
		views: [],
		fields: [],
		error_codes: {0: "unknown error(s)", 1: "invalid parameter(s) or wrong value(s)", 2: "SQL error(s)", 4: "unknown class or object", 8: "action not allowed : action violates some rule or you don't have permission to execute it"},
		simple_types: ['boolean', 'integer', 'float', 'string', 'short_text', 'text', 'date', 'time', 'datetime', 'timestamp', 'selection', 'binary', 'many2one'],

		init: function(conf) {
			$.extend(this.conf, conf);
		},

		/**
		* ObjectManager methods
		*/
		getObjectPackageName: function (class_name) {
				return class_name.substr(0, class_name.indexOf('\\'));
		},
		getObjectName: function(class_name) {
				return class_name.substr(class_name.indexOf('\\')+1);
		},
		browse: function(class_name, ids, fields, lang) {
				var result = [];
				var values = {
					object_class: class_name,
					ids: ids,
					fields: null,					
					lang: easyObject.conf.content_lang
				};
				if(typeof fields != 'undefined')	values.fields = fields;
				if(typeof lang != 'undefined')		values.lang = lang;
				
				$.ajax({
					type: 'GET',
					url: 'index.php?get=core_objects_browse',
					async: false,
					dataType: 'json',
					// note: remember that with 'fields' parameter set to null, only simple fields will be returned
					data: values,
					contentType: 'application/json; charset=utf-8',
					success: function(json_data){
							if(!json_data) alert("Unable to browse object : check fields names in DB/schema/related view and user's permissions");
							else result = json_data;
					},
					error: function(e){
					}
				});
				return result;
		},
		search: function(class_name, domain, order, sort, start, limit, lang) {
				var result = [];
				var values = {
					object_class: class_name,
					domain: [[[]]],
					lang: easyObject.conf.content_lang
				};
				
				if(typeof domain != 'undefined')	values.domain = domain;
				if(typeof order != 'undefined')		values.order = order;
				if(typeof sort != 'undefined')		values.sort = sort;
				if(typeof start != 'undefined')		values.start = start;
				if(typeof limit != 'undefined')		values.limit = limit;
				if(typeof lang != 'undefined')		values.lang = lang;
				
				$.ajax({
					type: 'GET',
					url: 'index.php?get=core_objects_search',
					async: false,
					dataType: 'json',
					data: values,
					contentType: 'application/x-www-form-urlencoded; charset=utf-8',
					success: function(json_data){
						result = json_data;
					},
					error: function(e){
					}
				});
				return result;

		},
		update: function(class_name, ids, values, lang) {
			/*
				function serializeForm($form) {
					var params = {};
					$.each($form.serializeArray(), function(index, value) {
						params[value.name] = value.value;
					});
					return params;
				}
			*/
				var result = [];
				$.ajax({
					type: 'POST',
					url: 'index.php?do=core_objects_update',
					async: false,
					dataType: 'json',
					data: $.extend({
						object_class: class_name,
						ids: ids,
						lang: lang
					}, values),
					// note : this MIME content-type does not allow binary data (FILE elements)
					contentType: 'application/x-www-form-urlencoded; charset=utf-8',
					success: function(json_data){
						result = json_data.result;
					},
					error: function(e){
					}
				});
				return result;
		},
		remove: function(class_name, ids, permanent) {
				var result = [];
				$.ajax({
					type: 'GET',
					url: 'index.php?do=core_objects_remove',
					async: false,
					dataType: 'json',
					data: {
						object_class: class_name,
						ids: ids,
						permanent: Number(new Boolean(permanent))
					},
					contentType: 'application/json; charset=utf-8',
					success: function(json_data){
							if(!json_data) alert("Unable to remove object : check user's permissions");
							else result = json_data;
					},
					error: function(e){
					}
				});
				return result;
		},
// todo : undelete (force deleted field to 0)
		restore: function(class_name, id) {
				var result = [];
				$.ajax({
					type: 'GET',
					url: 'index.php?do=core_draft_restore&object_class='+class_name+'&id='+id,
					async: false,
					dataType: 'json',
					contentType: 'application/json; charset=utf-8',
					success: function(json_data){
					},
					error: function(e){
					}
				});
				return result;
		},

		/**
		* IdentificationManager methods
		*/
		lock: function (key, value) {
				if(typeof(value) == 'number') value = value.toString();
				if(typeof(key) == 'number') key = key.toString();
				if(value.length == 32) {
					var hex_prev = function (val) {
						var hex_tab = '0123456789abcdef';
						var prev = parseInt(val, 16) - 1;
						if(prev < 0) prev = 15;
						return hex_tab.charAt(prev);
					}
					for(i = 0; i < key.length; ++i) {
						pos =  parseInt(key.charAt(i));
						hex_val = hex_prev(value.charAt(pos));
						value = value.substring(0,pos) + hex_val + value.substring(pos+1);
					}
				}
				return value;
		},
		login: function() {
		},
		user_id: function () {
				if(!easyObject.conf.user_id) {
					$.ajax({
						type: 'GET',
						url: 'index.php?get=core_user_id',
						async: false,
						dataType: 'json',
						contentType: 'application/json; charset=utf-8',
						success: function(json_data){
								easyObject.conf.user_id = json_data.result;
						},
						error: function(e){
						}
					});
				}
				return easyObject.conf.user_id;
		},
		user_key: function () {
				if(!easyObject.conf.user_key) {
					$.ajax({
						type: 'GET',
						url: 'index.php?get=core_user_key',
						async: false,
						dataType: 'json',
						contentType: 'application/json; charset=utf-8',
						success: function(json_data){
								easyObject.conf.user_key = json_data.result;
						},
						error: function(e){
						}
					});
				}
				return easyObject.conf.user_key;
		},
		user_lang: function () {
				if(!easyObject.conf.user_lang) {
					$.ajax({
						type: 'GET',
						url: 'index.php?get=core_user_lang',
						async: false,
						dataType: 'json',
						contentType: 'application/json; charset=utf-8',
						success: function(json_data){
								easyObject.conf.user_key = json_data.result;
						},
						error: function(e){
						}
					});
				}
				return easyObject.conf.user_lang;
		}
};

/**
* easyObject standard API functions set
*
*/

function user_id() {
	return easyObject.user_id();
}

function user_key() {
	return easyObject.user_key();
}

function user_lang() {
	return easyObject.user_lang();
}

function lock(key, value) {
	value = rtrim(value);
	if(value.length == 0) return;
	return easyObject.lock(key, hex_md5(value));
}

function browse(class_name, ids, fields, lang) {
	return easyObject.browse(class_name, ids, fields, lang);
}

function search(class_name, domain, order, sort, start, limit, lang) {
	return easyObject.search(class_name, domain, order, sort, start, limit, lang);
}

function update(class_name, ids, values, lang) {
	return easyObject.update(class_name, ids, values, lang);
}

function remove(class_name, ids, permanent) {
	return easyObject.remove(class_name, ids, permanent);
}